package com.punam.employee.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.punam.employee.client.APIClient;
import com.punam.employee.entity.Employee;
import com.punam.employee.mapper.EmployeeMapper;
import com.punam.employee.model.APIResponse;
import com.punam.employee.model.DepartmentDto;
import com.punam.employee.model.EmployeeDto;
import com.punam.employee.repository.EmployeeRepository;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;


@Service
public class EmployeeServiceImpl implements EmployeeService {
	
	@Autowired
	private EmployeeRepository employeeRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private WebClient webClient;
	
	@Autowired
	private APIClient apiClient;
	
	private Logger logger = LoggerFactory.getLogger(EmployeeServiceImpl.class);
	

	@Override
	public EmployeeDto saveEmployee(EmployeeDto emp) {
		
		Employee employee = EmployeeMapper.mapToEmployee(emp);
		
		Employee savedEmployee = employeeRepository.save(employee);
		
		EmployeeDto employeeDto = EmployeeMapper.mapToEmployeeDto(savedEmployee);
		
		return employeeDto;
	}

	//@CircuitBreaker(name = "${spring.application.name}", fallbackMethod = "getEmployeeFallback")
	@Retry(name = "${spring.application.name}", fallbackMethod = "getEmployeeFallback")
	@Override
	public APIResponse getEmployee(Long id) {
		
		logger.info("Inside getEmployee method");
		
		Employee employee = employeeRepository.findById(id).get();
		
		EmployeeDto employeeDto = EmployeeMapper.mapToEmployeeDto(employee);
		
//		ResponseEntity<DepartmentDto> deptResponse = restTemplate.getForEntity("http://localhost:8080/api/departments/" + employee.getDepartmentCode(),
//				DepartmentDto.class);
//		DepartmentDto departmentDto = deptResponse.getBody();
		
//		DepartmentDto departmentDto = webClient.get()
//				.uri("http://localhost:8080/api/departments/" + employee.getDepartmentCode()).retrieve()
//				.bodyToMono(DepartmentDto.class).block();
		
		DepartmentDto departmentDto = apiClient.getDepartment(employee.getDepartmentCode());

		APIResponse response = new APIResponse();
		response.setEmployee(employeeDto);
		response.setDepartment(departmentDto);
		
		return response;
	}
	
	
	public APIResponse getEmployeeFallback(Long id, Exception e) {
		
		logger.info("Inside getEmployeeFallback method");

		Employee employee = employeeRepository.findById(id).get();

		EmployeeDto employeeDto = new EmployeeDto(employee.getId(), employee.getFirstName(), employee.getLastName(),
				employee.getEmail(), employee.getDepartmentCode(), employee.getOrgnizationCode());

		DepartmentDto departmentDto = new DepartmentDto();
		departmentDto.setName("Default");
		departmentDto.setId(1001L);
		departmentDto.setCode("DD001");
		departmentDto.setDescription("Research");

		APIResponse response = new APIResponse();
		response.setEmployee(employeeDto);
		response.setDepartment(departmentDto);

		return response;

	}

}
